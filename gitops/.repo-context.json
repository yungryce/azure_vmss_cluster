{
  "project_identity": {
    "name": "GitOps Continuous Delivery with Flux CD for Kubernetes",
    "type": "container",
    "scope": "gitops-continuous-delivery",
    "description": "Production-ready GitOps implementation using Flux CD for declarative Kubernetes application deployment, progressive delivery, and infrastructure management with advanced configuration layering and automated reconciliation.",
    "is_independent": false,
    "version": "2.0.0",
    "curriculum_stage": "advanced"
  },
  "tech_stack": {
    "primary": ["Flux CD 2.0+", "Kubernetes 1.24+", "Kustomize", "Git"],
    "secondary": ["SOPS", "Helm 3.0+", "OPA Gatekeeper", "Prometheus", "Grafana"],
    "key_libraries": ["flux2", "kustomize", "sops", "helm", "kubectl"],
    "development_tools": ["flux-cli", "kubectl", "kustomize", "sops", "git", "yamllint"],
    "testing_frameworks": ["conftest", "kubeval", "flux-system-tests", "kustomize-validation"]
  },
  "skill_manifest": {
    "technical": [
      "Advanced GitOps Architecture",
      "Flux CD Implementation & Management",
      "Kubernetes Manifest Orchestration",
      "Progressive Delivery Patterns",
      "Configuration Layering with Kustomize",
      "Multi-Environment Deployment Strategies",
      "Drift Detection & Automated Reconciliation",
      "Secret Management with SOPS",
      "Helm Chart Integration",
      "Policy Enforcement & Compliance",
      "Monitoring & Observability Integration"
    ],
    "domain": [
      "GitOps Continuous Delivery",
      "Kubernetes Application Lifecycle Management",
      "Infrastructure as Code",
      "Declarative Configuration Management",
      "Automated Deployment Pipelines",
      "Environment Promotion Workflows",
      "Security & Compliance Automation",
      "Observability & Monitoring"
    ],
    "competency_level": "advanced",
    "prerequisites": [
      "Strong understanding of Kubernetes architecture and manifests",
      "Experience with Git workflows and version control systems",
      "Knowledge of YAML configuration and Kustomize patterns",
      "Understanding of continuous delivery and DevOps principles",
      "Familiarity with container orchestration concepts"
    ]
  },
  "components": {
    "gitops_structure": [
      {
        "name": "Application Management",
        "files": ["apps/"],
        "description": "Declarative application configurations with base and overlay patterns"
      },
      {
        "name": "Infrastructure Components",
        "files": ["infrastructure/"],
        "description": "Core infrastructure resources including namespaces, RBAC, and networking"
      },
      {
        "name": "Cluster Configurations",
        "files": ["clusters/"],
        "description": "Environment-specific cluster configurations and Flux bootstrap"
      }
    ],
    "application_delivery": [
      {
        "name": "Base Configurations",
        "files": ["apps/base/"],
        "description": "Common application manifests and shared configurations"
      },
      {
        "name": "Environment Overlays",
        "files": ["apps/overlays/"],
        "description": "Environment-specific patches and configuration overrides"
      },
      {
        "name": "Kustomization Management",
        "files": ["*/kustomization.yaml"],
        "description": "Kustomize configuration files for resource composition"
      }
    ],
    "automation_scripts": [
      {
        "name": "Bootstrap Scripts",
        "files": ["scripts/bootstrap.sh"],
        "description": "Initial GitOps repository setup and Flux configuration"
      },
      {
        "name": "Synchronization Tools",
        "files": ["scripts/sync.sh"],
        "description": "Manual reconciliation and troubleshooting utilities"
      },
      {
        "name": "Validation Framework",
        "files": ["scripts/validate.sh"],
        "description": "Configuration validation and pre-deployment checks"
      }
    ]
  },
  "topics": [
    "GitOps Continuous Delivery",
    "Flux CD Implementation",
    "Kubernetes Application Management",
    "Declarative Configuration",
    "Progressive Delivery Patterns",
    "Multi-Environment Promotion",
    "Configuration Layering",
    "Automated Reconciliation",
    "Secret Management",
    "Policy Enforcement"
  ],
  "project_structure": {
    "type": "gitops_container",
    "organization": "declarative_configuration",
    "key_directories": ["apps/", "infrastructure/", "clusters/", "scripts/"],
    "entry_points": ["clusters/*/flux-system/", "apps/base/kustomization.yaml", "infrastructure/base/kustomization.yaml"],
    "configuration_files": ["kustomization.yaml", "*.yaml", "*.yml"],
    "automation_files": ["scripts/*.sh"]
  },
  "outcomes": {
    "deployment_deliverables": [
      "Automated GitOps continuous delivery pipeline",
      "Multi-environment application deployment workflow",
      "Declarative infrastructure management system",
      "Progressive delivery with automated rollback capabilities",
      "Secure secret management integration",
      "Policy-based compliance and governance framework"
    ],
    "learning_deliverables": [
      "Advanced GitOps architecture and implementation patterns",
      "Flux CD mastery for production Kubernetes environments",
      "Configuration management expertise with Kustomize",
      "Progressive delivery and deployment strategy implementation",
      "Security integration within GitOps workflows"
    ],
    "integration_points": [
      "Consumes Kubernetes cluster prepared by Ansible configuration",
      "Integrates with monitoring and observability systems",
      "Provides audit trail and compliance reporting",
      "Enables developer self-service deployment capabilities"
    ]
  },
  "relationships": {
    "parent": "azure_vmss_cluster",
    "peers": ["ansible", "terraform"],
    "depends_on": ["ansible"],
    "outputs_to": [],
    "consumers": ["development teams", "platform operators", "compliance systems"]
  },
  "files": {
    "gitops_manifests": [
      {
        "path": "apps/base/kustomization.yaml",
        "purpose": "Base application configuration orchestration",
        "skills": ["Kustomize patterns", "Resource composition", "Configuration management"]
      },
      {
        "path": "apps/overlays/*/",
        "purpose": "Environment-specific application configuration",
        "skills": ["Environment promotion", "Configuration layering", "Deployment strategies"]
      },
      {
        "path": "infrastructure/base/",
        "purpose": "Core infrastructure component definitions",
        "skills": ["Infrastructure as code", "Namespace management", "RBAC configuration"]
      },
      {
        "path": "clusters/*/",
        "purpose": "Cluster-specific Flux configurations",
        "skills": ["Flux bootstrap", "Cluster management", "GitOps implementation"]
      }
    ],
    "automation_tools": [
      {
        "path": "scripts/bootstrap.sh",
        "purpose": "GitOps repository initialization",
        "skills": ["Automation scripting", "Flux setup", "Repository configuration"]
      },
      {
        "path": "scripts/sync.sh",
        "purpose": "Manual synchronization and troubleshooting",
        "skills": ["Operational procedures", "Troubleshooting", "Manual intervention"]
      },
      {
        "path": "scripts/validate.sh",
        "purpose": "Configuration validation and testing",
        "skills": ["Validation frameworks", "Quality assurance", "Pre-deployment checks"]
      }
    ]
  },
  "assessment": {
    "gitops_implementation": [
      "Flux CD deployment and configuration completeness",
      "GitOps workflow implementation and automation",
      "Multi-environment deployment pipeline functionality",
      "Progressive delivery pattern implementation",
      "Security and compliance integration effectiveness"
    ],
    "configuration_management": [
      "Kustomize usage and environment overlay design",
      "Manifest organization and structure quality",
      "Secret management and encryption implementation",
      "Policy enforcement and compliance automation",
      "Documentation and operational procedures"
    ],
    "operational_excellence": [
      "Monitoring and observability integration",
      "Troubleshooting procedures and runbooks",
      "Disaster recovery and rollback capabilities",
      "Performance optimization and resource efficiency",
      "Team collaboration and self-service enablement"
    ]
  },
  "metadata": {
    "last_updated": "2025-06-24",
    "schema_version": "2.0",
    "quality_score": 0.96,
    "completeness": 0.98,
    "maintainability": 0.95,
    "documentation_coverage": 0.97,
    "test_coverage": 0.90,
    "security_score": 0.94,
    "performance_score": 0.93,
    "reliability_score": 0.96
  }
}